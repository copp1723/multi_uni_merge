# üê≥ DOCKER COMPOSE - LOCAL DEVELOPMENT ENVIRONMENT

version: '3.8'

services:
  # Backend Flask API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: swarm-backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DEBUG=true
      - DATABASE_URL=postgresql://swarm_user:swarm_pass@postgres:5432/swarm_db
      - REDIS_URL=redis://redis:6379
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - SUPERMEMORY_API_KEY=${SUPERMEMORY_API_KEY}
      - MAILGUN_API_KEY=${MAILGUN_API_KEY}
      - MAILGUN_DOMAIN=${MAILGUN_DOMAIN}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-secret-key}
    volumes:
      - ./backend:/app
      - ./shared:/app/shared
    depends_on:
      - postgres
      - redis
    networks:
      - swarm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: swarm-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:5000
      - VITE_WS_URL=ws://localhost:5000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - swarm-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: swarm-postgres
    environment:
      - POSTGRES_DB=swarm_db
      - POSTGRES_USER=swarm_user
      - POSTGRES_PASSWORD=swarm_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - swarm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U swarm_user -d swarm_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: swarm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - swarm-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: swarm-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - swarm-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  swarm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

